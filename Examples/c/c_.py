# This is automatically generated code. Do not modify
from peggen.peggen_ import *
PUNC_46_46_46 = StringRule("...")
PUNC_60_60_61 = StringRule("<<=")
PUNC_62_62_61 = StringRule(">>=")
PUNC_45_62 = StringRule("->")
PUNC_43_43 = StringRule("++")
PUNC_45_45 = StringRule("--")
PUNC_38_61 = StringRule("&=")
PUNC_35_35 = StringRule("##")
PUNC_42_61 = StringRule("*=")
PUNC_43_61 = StringRule("+=")
PUNC_45_61 = StringRule("-=")
PUNC_47_61 = StringRule("/=")
PUNC_37_61 = StringRule("%=")
PUNC_60_61 = StringRule("<=")
PUNC_62_61 = StringRule(">=")
PUNC_62_62 = StringRule(">>")
PUNC_61_61 = StringRule("==")
PUNC_33_61 = StringRule("!=")
PUNC_94_61 = StringRule("^=")
PUNC_124_124 = StringRule("||")
PUNC_38_38 = StringRule("&&")
PUNC_124_61 = StringRule("|=")
PUNC_60_60 = StringRule("<<")
PUNC_59 = StringRule(";")
PUNC_61 = StringRule("=")
PUNC_42 = StringRule("*")
PUNC_47 = StringRule("/")
PUNC_37 = StringRule("%")
PUNC_43 = StringRule("+")
PUNC_45 = StringRule("-")
PUNC_62 = StringRule(">")
PUNC_38 = StringRule("&")
PUNC_94 = StringRule("^")
PUNC_124 = StringRule("|")
PUNC_44 = StringRule(",")
PUNC_35 = StringRule("#")
PUNC_60 = StringRule("<")
PUNC_91 = StringRule("[")
PUNC_93 = StringRule("]")
PUNC_40 = StringRule("(")
PUNC_41 = StringRule(")")
PUNC_123 = StringRule("{")
PUNC_125 = StringRule("}")
PUNC_46 = StringRule(".")
PUNC_126 = StringRule("~")
PUNC_33 = StringRule("!")
PUNC_63 = StringRule("?")
PUNC_58 = StringRule(":")
__ASM__ = StringRule("__asm__")
__ASM = StringRule("__asm")
__BASED = StringRule("__based")
__CDECL = StringRule("__cdecl")
__CLRCALL = StringRule("__clrcall")
__DECLSPEC = StringRule("__declspec")
__FASTCALL = StringRule("__fastcall")
__INLINE = StringRule("__inline")
__INLINE__ = StringRule("__inline__")
__INT8 = StringRule("__int8")
__INT16 = StringRule("__int16")
__INT32 = StringRule("__int32")
__INT64 = StringRule("__int64")
__RESTRICT__ = StringRule("__restrict__")
__STDCALL = StringRule("__stdcall")
__THISCALL = StringRule("__thiscall")
__TYPEOF__ = StringRule("__typeof__")
__VECTORCALL = StringRule("__vectorcall")
__VOLATILE__ = StringRule("__volatile__")
__ATTRIBUTE__ = StringRule("__attribute__")
ASM = StringRule("asm")
AUTO = StringRule("auto")
BREAK = StringRule("break")
CASE = StringRule("case")
CHAR = StringRule("char")
CONST = StringRule("const")
CONTINUE = StringRule("continue")
DEFAULT = StringRule("default")
DO = StringRule("do")
DOUBLE = StringRule("double")
ELSE = StringRule("else")
ENUM = StringRule("enum")
EXTERN = StringRule("extern")
FLOAT = StringRule("float")
FOR = StringRule("for")
GOTO = StringRule("goto")
IF = StringRule("if")
INLINE = StringRule("inline")
INT = StringRule("int")
LONG = StringRule("long")
MACRO = StringRule("macro")
PRAGMA = StringRule("pragma")
REGISTER = StringRule("register")
RESTRICT = StringRule("restrict")
RETURN = StringRule("return")
SHORT = StringRule("short")
SIGNED = StringRule("signed")
SIZEOF = StringRule("sizeof")
STATIC = StringRule("static")
STRUCT = StringRule("struct")
SWITCH = StringRule("switch")
TYPEDEF = StringRule("typedef")
TYPEOF = StringRule("typeof")
UNION = StringRule("union")
UNSIGNED = StringRule("unsigned")
VOID = StringRule("void")
VOLATILE = StringRule("volatile")
WHILE = StringRule("while")
_ALIGNAS = StringRule("_Alignas")
_ALIGNOF = StringRule("_Alignof")
_ATOMIC = StringRule("_Atomic")
_BOOL = StringRule("_Bool")
_COMPLEX = StringRule("_Complex")
_GENERIC = StringRule("_Generic")
_IMAGINARY = StringRule("_Imaginary")
_NORETURN = StringRule("_Noreturn")
_STATIC_ASSERT = StringRule("_Static_assert")
_THREAD_LOCAL = StringRule("_Thread_local")
ROOT = Production(name = "root")
TOKEN = Production(name = "token")
PUNCTUATOR = Production(name = "punctuator")
KEYWORD = Production(name = "keyword")
WHITESPACE = Production(name = "whitespace")
IDENTIFIER = Production(name = "identifier")
DIGIT = Production(name = "digit")
NONDIGIT = Production(name = "nondigit")
INT_CONSTANT = Production(name = "int_constant")
HEX_FLOAT_CONSTANT = Production(name = "hex_float_constant")
DECIMAL_FLOAT_CONSTANT = Production(name = "decimal_float_constant")
FLOAT_CONSTANT = Production(name = "float_constant")
ENUM_CONSTANT = Production(name = "enum_constant")
CHAR_CONSTANT = Production(name = "char_constant")
CONSTANT = Production(name = "constant")
STRING_LITERAL = Production(name = "string_literal")
PRIMARY_EXPRESSION = Production(name = "primary_expression")
GENERIC_SELECTION = Production(name = "generic_selection")
GENERIC_ASSOC_LIST = Production(name = "generic_assoc_list")
GENERIC_ASSOCIATION = Production(name = "generic_association")
POSTFIX_EXPRESSION = Production(name = "postfix_expression")
POSTFIX_EXPRESSION_START = Production(name = "postfix_expression_start")
COMPOUND_LITERAL = Production(name = "compound_literal")
GET_MEMBER_EXPRESSION = Production(name = "get_member_expression")
CALL_EXPRESSION = Production(name = "call_expression")
ARGUMENT_EXPRESSION_LIST = Production(name = "argument_expression_list")
NAMESPACE_ACCESS_EXPRESSION = Production(name = "namespace_access_expression")
POINTER_ACCESS_EXPRESSION = Production(name = "pointer_access_expression")
UNARY_EXPRESSION = Production(name = "unary_expression")
UNARY_OPERATOR = Production(name = "unary_operator")
CAST_EXPRESSION = Production(name = "cast_expression")
MULTIPLICATIVE_EXPRESSION = Production(name = "multiplicative_expression")
ADDITIVE_EXPRESSION = Production(name = "additive_expression")
SHIFT_EXPRESSION = Production(name = "shift_expression")
RELATIONAL_EXPRESSION = Production(name = "relational_expression")
EQUALITY_EXPRESSION = Production(name = "equality_expression")
AND_EXPRESSION = Production(name = "AND_expression")
XOR_EXPRESSION = Production(name = "XOR_expression")
OR_EXPRESSION = Production(name = "OR_expression")
LOGAND_EXPRESSION = Production(name = "logAND_expression")
LOGOR_EXPRESSION = Production(name = "logOR_expression")
CONDITIONAL_EXPRESSION = Production(name = "conditional_expression")
ASSIGNMENT_EXPRESSION = Production(name = "assignment_expression")
ASSIGNMENT_OPERATOR = Production(name = "assignment_operator")
EXPRESSION = Production(name = "expression")
CONSTANT_EXPRESSION = Production(name = "constant_expression")
TYPEDEF_OPT = Production(name = "typedef_opt")
C_DECLARATION = Production(name = "c_declaration")
DECLARATION = Production(name = "declaration")
DECLARATION_STANDARD = Production(name = "declaration_standard")
NON_PAREN = Production(name = "non_paren")
PAREN_BLOCK = Production(name = "paren_block")
DECLARATION_SPECIFIER = Production(name = "declaration_specifier")
MSATTRIBUTE = Production(name = "msattribute")
ATTRIBUTE_SPECIFIER = Production(name = "attribute_specifier")
INIT_DECLARATOR = Production(name = "init_declarator")
INIT_DECLARATOR_LIST = Production(name = "init_declarator_list")
STORAGE_CLASS_SPECIFIER = Production(name = "storage_class_specifier")
MSDECLSPEC = Production(name = "msdeclspec")
TYPE_SPECIFIER = Production(name = "type_specifier")
STRUCT_OR_UNION_SPECIFIER = Production(name = "struct_or_union_specifier")
STRUCT_OR_UNION = Production(name = "struct_or_union")
STRUCT_DECLARATION = Production(name = "struct_declaration")
MEMBER_DECLARATION = Production(name = "member_declaration")
SPECIFIER_QUALIFIER = Production(name = "specifier_qualifier")
SPECIFIER_QUALIFIER_LIST = Production(name = "specifier_qualifier_list")
STRUCT_DECLARATOR_LIST = Production(name = "struct_declarator_list")
STRUCT_DECLARATOR = Production(name = "struct_declarator")
ENUM_SPECIFIER = Production(name = "enum_specifier")
ENUMERATOR_LIST = Production(name = "enumerator_list")
ENUMERATOR = Production(name = "enumerator")
ATOMIC_TYPE_SPECIFIER = Production(name = "atomic_type_specifier")
TYPE_QUALIFIER = Production(name = "type_qualifier")
FUNCTION_SPECIFIER = Production(name = "function_specifier")
ALIGNMENT_SPECIFIER = Production(name = "alignment_specifier")
DECLARATOR = Production(name = "declarator")
DIRECT_DECLARATOR = Production(name = "direct_declarator")
ARRAY_DECLARATOR = Production(name = "array_declarator")
FUNCTION_DECLARATOR = Production(name = "function_declarator")
POINTER = Production(name = "pointer")
PARAMETER_TYPE_LIST = Production(name = "parameter_type_list")
PARAMETER_LIST = Production(name = "parameter_list")
PARAMETER_DECLARATION = Production(name = "parameter_declaration")
IDENTIFIER_LIST = Production(name = "identifier_list")
TYPE_NAME = Production(name = "type_name")
ABSTRACT_DECLARATOR = Production(name = "abstract_declarator")
DIRECT_ABSTRACT_DECLARATOR = Production(name = "direct_abstract_declarator")
ARRAY_ABS_DECLARATOR = Production(name = "array_abs_declarator")
FUNCTION_ABS_DECLARATOR = Production(name = "function_abs_declarator")
TYPEDEF_NAME = Production(name = "typedef_name")
INITIALIZER = Production(name = "initializer")
INITIALIZER_LIST = Production(name = "initializer_list")
DESIGNATION = Production(name = "designation")
DESIGNATOR = Production(name = "designator")
STATIC_ASSERT_DECLARATION = Production(name = "static_assert_declaration")
STATEMENT = Production(name = "statement")
ASM_STATEMENT = Production(name = "asm_statement")
ASM_QUALIFIERS = Production(name = "asm_qualifiers")
LABELED_STATEMENT = Production(name = "labeled_statement")
COMPOUND_STATEMENT = Production(name = "compound_statement")
BLOCK_ITEM = Production(name = "block_item")
EXPRESSION_STATEMENT = Production(name = "expression_statement")
SELECTION_STATEMENT = Production(name = "selection_statement")
ITERATION_STATEMENT = Production(name = "iteration_statement")
JUMP_STATEMENT = Production(name = "jump_statement")
C_FUNCTION_DEFINITION = Production(name = "c_function_definition")
FUNCTION_DEFINITION = Production(name = "function_definition")
FUNCTION_DEFINITION_REC = Production(name = "function_definition_rec")
NON_LINE_END = Production(name = "non_line_end")
PRAGMA_DIRECTIVE = Production(name = "pragma_directive")
EXTERNAL_DECLARATION = Production(name = "external_declaration")

class cParser(Parser):
    def __init__(self, string, *args, **kwargs):
        super().__init__(string, TOKEN, ROOT, *args, auto_traverse=False, **kwargs)
__all__ = ["PUNC_46_46_46","PUNC_60_60_61","PUNC_62_62_61","PUNC_45_62","PUNC_43_43","PUNC_45_45","PUNC_38_61","PUNC_35_35","PUNC_42_61","PUNC_43_61","PUNC_45_61","PUNC_47_61","PUNC_37_61","PUNC_60_61","PUNC_62_61","PUNC_62_62","PUNC_61_61","PUNC_33_61","PUNC_94_61","PUNC_124_124","PUNC_38_38","PUNC_124_61","PUNC_60_60","PUNC_59","PUNC_61","PUNC_42","PUNC_47","PUNC_37","PUNC_43","PUNC_45","PUNC_62","PUNC_38","PUNC_94","PUNC_124","PUNC_44","PUNC_35","PUNC_60","PUNC_91","PUNC_93","PUNC_40","PUNC_41","PUNC_123","PUNC_125","PUNC_46","PUNC_126","PUNC_33","PUNC_63","PUNC_58","__ASM__","__ASM","__BASED","__CDECL","__CLRCALL","__DECLSPEC","__FASTCALL","__INLINE","__INLINE__","__INT8","__INT16","__INT32","__INT64","__RESTRICT__","__STDCALL","__THISCALL","__TYPEOF__","__VECTORCALL","__VOLATILE__","__ATTRIBUTE__","ASM","AUTO","BREAK","CASE","CHAR","CONST","CONTINUE","DEFAULT","DO","DOUBLE","ELSE","ENUM","EXTERN","FLOAT","FOR","GOTO","IF","INLINE","INT","LONG","MACRO","PRAGMA","REGISTER","RESTRICT","RETURN","SHORT","SIGNED","SIZEOF","STATIC","STRUCT","SWITCH","TYPEDEF","TYPEOF","UNION","UNSIGNED","VOID","VOLATILE","WHILE","_ALIGNAS","_ALIGNOF","_ATOMIC","_BOOL","_COMPLEX","_GENERIC","_IMAGINARY","_NORETURN","_STATIC_ASSERT","_THREAD_LOCAL","ROOT","TOKEN","PUNCTUATOR","KEYWORD","WHITESPACE","IDENTIFIER","DIGIT","NONDIGIT","INT_CONSTANT","HEX_FLOAT_CONSTANT","DECIMAL_FLOAT_CONSTANT","FLOAT_CONSTANT","ENUM_CONSTANT","CHAR_CONSTANT","CONSTANT","STRING_LITERAL","PRIMARY_EXPRESSION","GENERIC_SELECTION","GENERIC_ASSOC_LIST","GENERIC_ASSOCIATION","POSTFIX_EXPRESSION","POSTFIX_EXPRESSION_START","COMPOUND_LITERAL","GET_MEMBER_EXPRESSION","CALL_EXPRESSION","ARGUMENT_EXPRESSION_LIST","NAMESPACE_ACCESS_EXPRESSION","POINTER_ACCESS_EXPRESSION","UNARY_EXPRESSION","UNARY_OPERATOR","CAST_EXPRESSION","MULTIPLICATIVE_EXPRESSION","ADDITIVE_EXPRESSION","SHIFT_EXPRESSION","RELATIONAL_EXPRESSION","EQUALITY_EXPRESSION","AND_EXPRESSION","XOR_EXPRESSION","OR_EXPRESSION","LOGAND_EXPRESSION","LOGOR_EXPRESSION","CONDITIONAL_EXPRESSION","ASSIGNMENT_EXPRESSION","ASSIGNMENT_OPERATOR","EXPRESSION","CONSTANT_EXPRESSION","TYPEDEF_OPT","C_DECLARATION","DECLARATION","DECLARATION_STANDARD","NON_PAREN","PAREN_BLOCK","DECLARATION_SPECIFIER","MSATTRIBUTE","ATTRIBUTE_SPECIFIER","INIT_DECLARATOR","INIT_DECLARATOR_LIST","STORAGE_CLASS_SPECIFIER","MSDECLSPEC","TYPE_SPECIFIER","STRUCT_OR_UNION_SPECIFIER","STRUCT_OR_UNION","STRUCT_DECLARATION","MEMBER_DECLARATION","SPECIFIER_QUALIFIER","SPECIFIER_QUALIFIER_LIST","STRUCT_DECLARATOR_LIST","STRUCT_DECLARATOR","ENUM_SPECIFIER","ENUMERATOR_LIST","ENUMERATOR","ATOMIC_TYPE_SPECIFIER","TYPE_QUALIFIER","FUNCTION_SPECIFIER","ALIGNMENT_SPECIFIER","DECLARATOR","DIRECT_DECLARATOR","ARRAY_DECLARATOR","FUNCTION_DECLARATOR","POINTER","PARAMETER_TYPE_LIST","PARAMETER_LIST","PARAMETER_DECLARATION","IDENTIFIER_LIST","TYPE_NAME","ABSTRACT_DECLARATOR","DIRECT_ABSTRACT_DECLARATOR","ARRAY_ABS_DECLARATOR","FUNCTION_ABS_DECLARATOR","TYPEDEF_NAME","INITIALIZER","INITIALIZER_LIST","DESIGNATION","DESIGNATOR","STATIC_ASSERT_DECLARATION","STATEMENT","ASM_STATEMENT","ASM_QUALIFIERS","LABELED_STATEMENT","COMPOUND_STATEMENT","BLOCK_ITEM","EXPRESSION_STATEMENT","SELECTION_STATEMENT","ITERATION_STATEMENT","JUMP_STATEMENT","C_FUNCTION_DEFINITION","FUNCTION_DEFINITION","FUNCTION_DEFINITION_REC","NON_LINE_END","PRAGMA_DIRECTIVE","EXTERNAL_DECLARATION","cParser"]
