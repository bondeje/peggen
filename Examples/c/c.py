# This is automatically generated code. Do not modify
from peggen.peggen_ import *
from c_impl2 import *
from c_ import *
Production.__init__(ROOT, Repeat(EXTERNAL_DECLARATION, 1, 0), "root", build_action_default, None)
Production.__init__(TOKEN, FirstChoice([WHITESPACE,PUNCTUATOR,CONSTANT,STRING_LITERAL,IDENTIFIER,KEYWORD], '(whitespace / punctuator / constant / string_literal / identifier / keyword)'), "token", token_action, None)
Production.__init__(PUNCTUATOR, RegexRule("(\.\.\.)|(<<=)|(>>=)|(->)|(\+\+)|(--)|(&=)|(##)|(\*=)|(\+=)|(-=)|(/=)|(%=)|(<=)|(>=)|(>>)|(==)|(!=)|(\^=)|(\|\|)|(&&)|(\|=)|(<<)|(;)|(=)|(\*)|(/)|(%)|(\+)|(-)|(>)|(&)|(\^)|(\|)|(,)|(#)|(<)|(\[)|(])|(\()|(\))|(\{)|(})|(\.)|(~)|(!)|(\?)|(:)"), "punctuator", build_action_default, None)
Production.__init__(KEYWORD, RegexRule("(__asm__)|(__asm)|(__based)|(__cdecl)|(__clrcall)|(__declspec)|(__fastcall)|(__inline)|(__inline__)|(__int8)|(__int16)|(__int32)|(__int64)|(__restrict__)|(__stdcall)|(__thiscall)|(__typeof__)|(__vectorcall)|(__volatile__)|(__attribute__)|(asm)|(auto)|(break)|(case)|(char)|(const)|(continue)|(default)|(do)|(double)|(else)|(enum)|(extern)|(float)|(for)|(goto)|(if)|(inline)|(int)|(long)|(macro)|(pragma)|(register)|(restrict)|(return)|(short)|(signed)|(sizeof)|(static)|(struct)|(switch)|(typedef)|(typeof)|(union)|(unsigned)|(void)|(volatile)|(while)|(_Alignas)|(_Alignof)|(_Atomic)|(_Bool)|(_Complex)|(_Generic)|(_Imaginary)|(_Noreturn)|(_Static_assert)|(_Thread_local)"), "keyword", build_action_default, None)
Production.__init__(WHITESPACE, RegexRule("(\s+|(\\\\\n)|(//[^\n]*\n)|(/\*.*?\*/))+"), "whitespace", skip_token, None)
Production.__init__(IDENTIFIER, RegexRule("[a-zA-Z_]\w*"), "identifier", build_action_default, None)
Production.__init__(DIGIT, RegexRule("\d"), "digit", build_action_default, None)
Production.__init__(NONDIGIT, RegexRule("[a-zA-Z_]"), "nondigit", build_action_default, None)
Production.__init__(INT_CONSTANT, RegexRule("(([1-9]\d*)|(0(x|X)[A-Fa-f0-9]+)|(0[0-7]*))(((u|U)(l|L)?)|((l|L|LL|ll)(u|U)?))?"), "int_constant", build_action_default, None)
Production.__init__(HEX_FLOAT_CONSTANT, RegexRule("0(x|X)((([A-Fa-f0-9]*\.[A-Fa-f0-9]+)|([A-Fa-f0-9]+\.))|([A-Fa-f0-9]+))p(\+|-)?\d+(f|l|F|L)?"), "hex_float_constant", build_action_default, None)
Production.__init__(DECIMAL_FLOAT_CONSTANT, RegexRule("((((\d*\.\d+)|(\d+\.))([eE][-+]?\d+)?)|(\d+[eE][-+]?\d+))(f|l|F|L)?"), "decimal_float_constant", build_action_default, None)
Production.__init__(FLOAT_CONSTANT, FirstChoice([DECIMAL_FLOAT_CONSTANT,HEX_FLOAT_CONSTANT], '(decimal_float_constant / hex_float_constant)'), "float_constant", build_action_default, None)
Production.__init__(ENUM_CONSTANT, IDENTIFIER, "enum_constant", build_action_default, None)
Production.__init__(CHAR_CONSTANT, RegexRule("[LuU]?'([^\\\\]*?(\\\\.)?)*?'"), "char_constant", build_action_default, None)
Production.__init__(CONSTANT, FirstChoice([FLOAT_CONSTANT,INT_CONSTANT,CHAR_CONSTANT], '(float_constant / int_constant / char_constant)'), "constant", build_action_default, None)
Production.__init__(STRING_LITERAL, RegexRule("(u8|u|U|L)?\"(((?<=\\\\)\")|[^\"])*\""), "string_literal", build_action_default, None)
Production.__init__(PRIMARY_EXPRESSION, FirstChoice([IDENTIFIER,CONSTANT,STRING_LITERAL,And([PUNC_40,EXPRESSION,PUNC_41], '((, expression, ))'),GENERIC_SELECTION], '(identifier / constant / string_literal / ((, expression, )) / generic_selection)'), "primary_expression", build_action_default, None)
Production.__init__(GENERIC_SELECTION, And([_GENERIC,PUNC_40,ASSIGNMENT_EXPRESSION,PUNC_44,GENERIC_ASSOC_LIST,PUNC_41], '(_Generic, (, assignment_expression, ,, generic_assoc_list, ))'), "generic_selection", build_action_default, None)
Production.__init__(GENERIC_ASSOC_LIST, List(GENERIC_ASSOCIATION, PUNC_44), "generic_assoc_list", build_action_default, None)
Production.__init__(GENERIC_ASSOCIATION, And([FirstChoice([TYPE_NAME,DEFAULT], '(type_name / default)'),PUNC_58,ASSIGNMENT_EXPRESSION], '((type_name / default), :, assignment_expression)'), "generic_association", build_action_default, None)
Production.__init__(POSTFIX_EXPRESSION, And([POSTFIX_EXPRESSION_START,Repeat(FirstChoice([GET_MEMBER_EXPRESSION,CALL_EXPRESSION,NAMESPACE_ACCESS_EXPRESSION,POINTER_ACCESS_EXPRESSION,PUNC_43_43,PUNC_45_45], '(get_member_expression / call_expression / namespace_access_expression / pointer_access_expression / ++ / --)'), 0, 0)], '(postfix_expression_start, (get_member_expression / call_expression / namespace_access_expression / pointer_access_expression / ++ / --){0:})'), "postfix_expression", build_action_default, None)
Production.__init__(POSTFIX_EXPRESSION_START, FirstChoice([PRIMARY_EXPRESSION,COMPOUND_LITERAL], '(primary_expression / compound_literal)'), "postfix_expression_start", build_action_default, None)
Production.__init__(COMPOUND_LITERAL, And([PUNC_40,TYPE_NAME,PUNC_41,PUNC_123,INITIALIZER_LIST,Repeat(PUNC_44, 0, 1),PUNC_125], '((, type_name, ), {, initializer_list, ,{0:1}, })'), "compound_literal", build_action_default, None)
Production.__init__(GET_MEMBER_EXPRESSION, And([PUNC_91,EXPRESSION,PUNC_93], '([, expression, ])'), "get_member_expression", build_action_default, None)
Production.__init__(CALL_EXPRESSION, And([PUNC_40,Repeat(ARGUMENT_EXPRESSION_LIST, 0, 1),PUNC_41], '((, argument_expression_list{0:1}, ))'), "call_expression", build_action_default, None)
Production.__init__(ARGUMENT_EXPRESSION_LIST, List(ASSIGNMENT_EXPRESSION, PUNC_44), "argument_expression_list", build_action_default, None)
Production.__init__(NAMESPACE_ACCESS_EXPRESSION, And([PUNC_46,IDENTIFIER], '(., identifier)'), "namespace_access_expression", build_action_default, None)
Production.__init__(POINTER_ACCESS_EXPRESSION, And([PUNC_45_62,IDENTIFIER], '(->, identifier)'), "pointer_access_expression", build_action_default, None)
Production.__init__(UNARY_EXPRESSION, FirstChoice([And([SIZEOF,UNARY_EXPRESSION], '(sizeof, unary_expression)'),And([SIZEOF,PUNC_40,TYPE_NAME,PUNC_41], '(sizeof, (, type_name, ))'),And([_ALIGNOF,PUNC_40,TYPE_NAME,PUNC_41], '(_Alignof, (, type_name, ))'),POSTFIX_EXPRESSION,And([PUNC_43_43,UNARY_EXPRESSION], '(++, unary_expression)'),And([PUNC_45_45,UNARY_EXPRESSION], '(--, unary_expression)'),And([UNARY_OPERATOR,CAST_EXPRESSION], '(unary_operator, cast_expression)')], '((sizeof, unary_expression) / (sizeof, (, type_name, )) / (_Alignof, (, type_name, )) / postfix_expression / (++, unary_expression) / (--, unary_expression) / (unary_operator, cast_expression))'), "unary_expression", build_action_default, None)
Production.__init__(UNARY_OPERATOR, FirstChoice([PUNC_38,PUNC_42,PUNC_43,PUNC_45,PUNC_126,PUNC_33], '(& / * / + / - / ~ / !)'), "unary_operator", build_action_default, None)
Production.__init__(CAST_EXPRESSION, FirstChoice([And([PUNC_40,TYPE_NAME,PUNC_41,CAST_EXPRESSION], '((, type_name, ), cast_expression)'),UNARY_EXPRESSION], '(((, type_name, ), cast_expression) / unary_expression)'), "cast_expression", build_action_default, None)
Production.__init__(MULTIPLICATIVE_EXPRESSION, And([CAST_EXPRESSION,Repeat(And([FirstChoice([PUNC_42,PUNC_47,PUNC_37], '(* / / / %)'),CAST_EXPRESSION], '((* / / / %), cast_expression)'), 0, 0)], '(cast_expression, ((* / / / %), cast_expression){0:})'), "multiplicative_expression", build_action_default, None)
Production.__init__(ADDITIVE_EXPRESSION, And([MULTIPLICATIVE_EXPRESSION,Repeat(And([FirstChoice([PUNC_43,PUNC_45], '(+ / -)'),MULTIPLICATIVE_EXPRESSION], '((+ / -), multiplicative_expression)'), 0, 0)], '(multiplicative_expression, ((+ / -), multiplicative_expression){0:})'), "additive_expression", build_action_default, None)
Production.__init__(SHIFT_EXPRESSION, And([ADDITIVE_EXPRESSION,Repeat(And([FirstChoice([PUNC_60_60,PUNC_62_62], '(<< / >>)'),ADDITIVE_EXPRESSION], '((<< / >>), additive_expression)'), 0, 0)], '(additive_expression, ((<< / >>), additive_expression){0:})'), "shift_expression", build_action_default, None)
Production.__init__(RELATIONAL_EXPRESSION, And([SHIFT_EXPRESSION,Repeat(And([FirstChoice([PUNC_60,PUNC_62,PUNC_60_61,PUNC_62_61], '(< / > / <= / >=)'),SHIFT_EXPRESSION], '((< / > / <= / >=), shift_expression)'), 0, 0)], '(shift_expression, ((< / > / <= / >=), shift_expression){0:})'), "relational_expression", build_action_default, None)
Production.__init__(EQUALITY_EXPRESSION, And([RELATIONAL_EXPRESSION,Repeat(And([FirstChoice([PUNC_61_61,PUNC_33_61], '(== / !=)'),RELATIONAL_EXPRESSION], '((== / !=), relational_expression)'), 0, 0)], '(relational_expression, ((== / !=), relational_expression){0:})'), "equality_expression", build_action_default, None)
Production.__init__(AND_EXPRESSION, And([EQUALITY_EXPRESSION,Repeat(And([PUNC_38,EQUALITY_EXPRESSION], '(&, equality_expression)'), 0, 0)], '(equality_expression, (&, equality_expression){0:})'), "AND_expression", build_action_default, None)
Production.__init__(XOR_EXPRESSION, And([AND_EXPRESSION,Repeat(And([PUNC_94,AND_EXPRESSION], '(^, AND_expression)'), 0, 0)], '(AND_expression, (^, AND_expression){0:})'), "XOR_expression", build_action_default, None)
Production.__init__(OR_EXPRESSION, And([XOR_EXPRESSION,Repeat(And([PUNC_124,XOR_EXPRESSION], '(|, XOR_expression)'), 0, 0)], '(XOR_expression, (|, XOR_expression){0:})'), "OR_expression", build_action_default, None)
Production.__init__(LOGAND_EXPRESSION, And([OR_EXPRESSION,Repeat(And([PUNC_38_38,OR_EXPRESSION], '(&&, OR_expression)'), 0, 0)], '(OR_expression, (&&, OR_expression){0:})'), "logAND_expression", build_action_default, None)
Production.__init__(LOGOR_EXPRESSION, And([LOGAND_EXPRESSION,Repeat(And([PUNC_124_124,LOGAND_EXPRESSION], '(||, logAND_expression)'), 0, 0)], '(logAND_expression, (||, logAND_expression){0:})'), "logOR_expression", build_action_default, None)
Production.__init__(CONDITIONAL_EXPRESSION, FirstChoice([And([LOGOR_EXPRESSION,PUNC_63,EXPRESSION,PUNC_58,CONDITIONAL_EXPRESSION], '(logOR_expression, ?, expression, :, conditional_expression)'),LOGOR_EXPRESSION], '((logOR_expression, ?, expression, :, conditional_expression) / logOR_expression)'), "conditional_expression", build_action_default, None)
Production.__init__(ASSIGNMENT_EXPRESSION, FirstChoice([And([UNARY_EXPRESSION,ASSIGNMENT_OPERATOR,ASSIGNMENT_EXPRESSION], '(unary_expression, assignment_operator, assignment_expression)'),CONDITIONAL_EXPRESSION], '((unary_expression, assignment_operator, assignment_expression) / conditional_expression)'), "assignment_expression", build_action_default, None)
Production.__init__(ASSIGNMENT_OPERATOR, FirstChoice([PUNC_61,PUNC_42_61,PUNC_47_61,PUNC_37_61,PUNC_43_61,PUNC_45_61,PUNC_60_60_61,PUNC_62_62_61,PUNC_38_61,PUNC_94_61,PUNC_124_61], '(= / *= / /= / %= / += / -= / <<= / >>= / &= / ^= / |=)'), "assignment_operator", build_action_default, None)
Production.__init__(EXPRESSION, List(ASSIGNMENT_EXPRESSION, PUNC_44), "expression", build_action_default, None)
Production.__init__(CONSTANT_EXPRESSION, CONDITIONAL_EXPRESSION, "constant_expression", build_action_default, None)
Production.__init__(TYPEDEF_OPT, Repeat(TYPEDEF, 0, 1), "typedef_opt", build_action_default, None)
Production.__init__(C_DECLARATION, FirstChoice([And([Repeat(TYPEDEF, 0, 1),Repeat(DECLARATION_SPECIFIER, 1, 0),Repeat(INIT_DECLARATOR_LIST, 0, 1),PUNC_59], '(typedef{0:1}, declaration_specifier{1:}, init_declarator_list{0:1}, ;)'),STATIC_ASSERT_DECLARATION], '((typedef{0:1}, declaration_specifier{1:}, init_declarator_list{0:1}, ;) / static_assert_declaration)'), "c_declaration", build_action_default, None)
Production.__init__(DECLARATION, FirstChoice([DECLARATION_STANDARD,STATIC_ASSERT_DECLARATION], '(declaration_standard / static_assert_declaration)'), "declaration", build_action_default, None)
Production.__init__(DECLARATION_STANDARD, And([DECLARATION_SPECIFIER,FirstChoice([And([Repeat(INIT_DECLARATOR_LIST, 0, 1),PUNC_59], '(init_declarator_list{0:1}, ;)'),DECLARATION_STANDARD], '((init_declarator_list{0:1}, ;) / declaration_standard)')], '(declaration_specifier, ((init_declarator_list{0:1}, ;) / declaration_standard))'), "declaration_standard", build_action_default, None)
Production.__init__(NON_PAREN, RegexRule("[^\()]+"), "non_paren", build_action_default, None)
Production.__init__(PAREN_BLOCK, And([PUNC_40,Repeat(NON_PAREN, 0, 0),Repeat(PAREN_BLOCK, 0, 1),Repeat(NON_PAREN, 0, 0),PUNC_41], '((, non_paren{0:}, paren_block{0:1}, non_paren{0:}, ))'), "paren_block", build_action_default, None)
Production.__init__(DECLARATION_SPECIFIER, FirstChoice([STORAGE_CLASS_SPECIFIER,TYPE_QUALIFIER,FUNCTION_SPECIFIER,ALIGNMENT_SPECIFIER,ATTRIBUTE_SPECIFIER,TYPE_SPECIFIER], '(storage_class_specifier / type_qualifier / function_specifier / alignment_specifier / attribute_specifier / type_specifier)'), "declaration_specifier", build_action_default, None)
Production.__init__(MSATTRIBUTE, FirstChoice([__ASM,__BASED,__CDECL,__CLRCALL,__FASTCALL,__INLINE,__STDCALL,__THISCALL,__VECTORCALL], '(__asm / __based / __cdecl / __clrcall / __fastcall / __inline / __stdcall / __thiscall / __vectorcall)'), "msattribute", build_action_default, None)
Production.__init__(ATTRIBUTE_SPECIFIER, And([__ATTRIBUTE__,PAREN_BLOCK], '(__attribute__, paren_block)'), "attribute_specifier", build_action_default, None)
Production.__init__(INIT_DECLARATOR, And([DECLARATOR,Repeat(ATTRIBUTE_SPECIFIER, 0, 0),Repeat(And([PUNC_61,INITIALIZER], '(=, initializer)'), 0, 1)], '(declarator, attribute_specifier{0:}, (=, initializer){0:1})'), "init_declarator", build_action_default, None)
Production.__init__(INIT_DECLARATOR_LIST, List(INIT_DECLARATOR, PUNC_44), "init_declarator_list", build_action_default, None)
Production.__init__(STORAGE_CLASS_SPECIFIER, FirstChoice([AUTO,EXTERN,REGISTER,STATIC,_THREAD_LOCAL,TYPEDEF,MSDECLSPEC], '(auto / extern / register / static / _Thread_local / typedef / msdeclspec)'), "storage_class_specifier", build_action_default, None)
Production.__init__(MSDECLSPEC, And([__DECLSPEC,PUNC_40,Repeat(IDENTIFIER, 0, 0),PUNC_41], '(__declspec, (, identifier{0:}, ))'), "msdeclspec", build_action_default, None)
Production.__init__(TYPE_SPECIFIER, FirstChoice([VOID,CHAR,SHORT,INT,__INT8,__INT16,__INT32,__INT64,LONG,FLOAT,DOUBLE,SIGNED,UNSIGNED,_BOOL,_COMPLEX,ATOMIC_TYPE_SPECIFIER,STRUCT_OR_UNION_SPECIFIER,ENUM_SPECIFIER,TYPEDEF_NAME], '(void / char / short / int / __int8 / __int16 / __int32 / __int64 / long / float / double / signed / unsigned / _Bool / _Complex / atomic_type_specifier / struct_or_union_specifier / enum_specifier / typedef_name)'), "type_specifier", build_action_default, None)
Production.__init__(STRUCT_OR_UNION_SPECIFIER, And([STRUCT_OR_UNION,FirstChoice([And([Repeat(IDENTIFIER, 0, 1),PUNC_123,Repeat(STRUCT_DECLARATION, 1, 0),PUNC_125], '(identifier{0:1}, {, struct_declaration{1:}, })'),IDENTIFIER], '((identifier{0:1}, {, struct_declaration{1:}, }) / identifier)')], '(struct_or_union, ((identifier{0:1}, {, struct_declaration{1:}, }) / identifier))'), "struct_or_union_specifier", build_action_default, None)
Production.__init__(STRUCT_OR_UNION, FirstChoice([STRUCT,UNION], '(struct / union)'), "struct_or_union", build_action_default, None)
Production.__init__(STRUCT_DECLARATION, FirstChoice([MEMBER_DECLARATION,STATIC_ASSERT_DECLARATION], '(member_declaration / static_assert_declaration)'), "struct_declaration", build_action_default, None)
Production.__init__(MEMBER_DECLARATION, And([SPECIFIER_QUALIFIER,FirstChoice([And([Repeat(STRUCT_DECLARATOR_LIST, 0, 1),PUNC_59], '(struct_declarator_list{0:1}, ;)'),MEMBER_DECLARATION], '((struct_declarator_list{0:1}, ;) / member_declaration)')], '(specifier_qualifier, ((struct_declarator_list{0:1}, ;) / member_declaration))'), "member_declaration", build_action_default, None)
Production.__init__(SPECIFIER_QUALIFIER, FirstChoice([TYPE_QUALIFIER,TYPE_SPECIFIER], '(type_qualifier / type_specifier)'), "specifier_qualifier", build_action_default, None)
Production.__init__(SPECIFIER_QUALIFIER_LIST, Repeat(SPECIFIER_QUALIFIER, 1, 0), "specifier_qualifier_list", build_action_default, None)
Production.__init__(STRUCT_DECLARATOR_LIST, List(STRUCT_DECLARATOR, PUNC_44), "struct_declarator_list", build_action_default, None)
Production.__init__(STRUCT_DECLARATOR, FirstChoice([DECLARATOR,And([Repeat(DECLARATOR, 0, 1),PUNC_58,CONSTANT_EXPRESSION], '(declarator{0:1}, :, constant_expression)')], '(declarator / (declarator{0:1}, :, constant_expression))'), "struct_declarator", build_action_default, None)
Production.__init__(ENUM_SPECIFIER, And([ENUM,FirstChoice([And([Repeat(IDENTIFIER, 0, 1),PUNC_123,ENUMERATOR_LIST,Repeat(PUNC_44, 0, 1),PUNC_125], '(identifier{0:1}, {, enumerator_list, ,{0:1}, })'),IDENTIFIER], '((identifier{0:1}, {, enumerator_list, ,{0:1}, }) / identifier)')], '(enum, ((identifier{0:1}, {, enumerator_list, ,{0:1}, }) / identifier))'), "enum_specifier", build_action_default, None)
Production.__init__(ENUMERATOR_LIST, List(ENUMERATOR, PUNC_44), "enumerator_list", build_action_default, None)
Production.__init__(ENUMERATOR, And([ENUM_CONSTANT,Repeat(And([PUNC_61,CONSTANT_EXPRESSION], '(=, constant_expression)'), 0, 1)], '(enum_constant, (=, constant_expression){0:1})'), "enumerator", build_action_default, None)
Production.__init__(ATOMIC_TYPE_SPECIFIER, And([_ATOMIC,PUNC_40,TYPE_NAME,PUNC_41], '(_Atomic, (, type_name, ))'), "atomic_type_specifier", build_action_default, None)
Production.__init__(TYPE_QUALIFIER, FirstChoice([CONST,VOLATILE,__VOLATILE__,RESTRICT,__RESTRICT__,_ATOMIC], '(const / volatile / __volatile__ / restrict / __restrict__ / _Atomic)'), "type_qualifier", build_action_default, None)
Production.__init__(FUNCTION_SPECIFIER, FirstChoice([INLINE,__INLINE__,_NORETURN], '(inline / __inline__ / _Noreturn)'), "function_specifier", build_action_default, None)
Production.__init__(ALIGNMENT_SPECIFIER, And([_ALIGNAS,PUNC_40,FirstChoice([TYPE_NAME,CONSTANT_EXPRESSION], '(type_name / constant_expression)'),PUNC_41], '(_Alignas, (, (type_name / constant_expression), ))'), "alignment_specifier", build_action_default, None)
Production.__init__(DECLARATOR, And([Repeat(POINTER, 0, 1),DIRECT_DECLARATOR], '(pointer{0:1}, direct_declarator)'), "declarator", build_action_default, None)
Production.__init__(DIRECT_DECLARATOR, And([FirstChoice([And([Repeat(MSATTRIBUTE, 0, 0),IDENTIFIER], '(msattribute{0:}, identifier)'),And([PUNC_40,DECLARATOR,PUNC_41], '((, declarator, ))')], '((msattribute{0:}, identifier) / ((, declarator, )))'),Repeat(FirstChoice([ARRAY_DECLARATOR,FUNCTION_DECLARATOR], '(array_declarator / function_declarator)'), 0, 0)], '(((msattribute{0:}, identifier) / ((, declarator, ))), (array_declarator / function_declarator){0:})'), "direct_declarator", build_action_default, None)
Production.__init__(ARRAY_DECLARATOR, And([PUNC_91,Repeat(STATIC, 0, 1),Repeat(TYPE_QUALIFIER, 0, 0),Repeat(STATIC, 0, 1),Repeat(FirstChoice([ASSIGNMENT_EXPRESSION,PUNC_42], '(assignment_expression / *)'), 0, 1),PUNC_93], '([, static{0:1}, type_qualifier{0:}, static{0:1}, (assignment_expression / *){0:1}, ])'), "array_declarator", build_action_default, None)
Production.__init__(FUNCTION_DECLARATOR, And([PUNC_40,Repeat(PARAMETER_TYPE_LIST, 0, 1),PUNC_41], '((, parameter_type_list{0:1}, ))'), "function_declarator", build_action_default, None)
Production.__init__(POINTER, Repeat(And([PUNC_42,Repeat(FirstChoice([TYPE_QUALIFIER,ATTRIBUTE_SPECIFIER], '(type_qualifier / attribute_specifier)'), 0, 0)], '(*, (type_qualifier / attribute_specifier){0:})'), 1, 0), "pointer", build_action_default, None)
Production.__init__(PARAMETER_TYPE_LIST, And([PARAMETER_LIST,Repeat(And([PUNC_44,PUNC_46_46_46], '(,, ...)'), 0, 1)], '(parameter_list, (,, ...){0:1})'), "parameter_type_list", build_action_default, None)
Production.__init__(PARAMETER_LIST, List(PARAMETER_DECLARATION, PUNC_44), "parameter_list", build_action_default, None)
Production.__init__(PARAMETER_DECLARATION, And([DECLARATION_SPECIFIER,Repeat(FirstChoice([And([FirstChoice([DECLARATOR,ABSTRACT_DECLARATOR], '(declarator / abstract_declarator)'),PositiveLookahead(FirstChoice([PUNC_44,PUNC_41], '(, / ))'))], '((declarator / abstract_declarator), &(, / )))'),PARAMETER_DECLARATION], '(((declarator / abstract_declarator), &(, / ))) / parameter_declaration)'), 0, 1)], '(declaration_specifier, (((declarator / abstract_declarator), &(, / ))) / parameter_declaration){0:1})'), "parameter_declaration", build_action_default, None)
Production.__init__(IDENTIFIER_LIST, List(IDENTIFIER, PUNC_44), "identifier_list", build_action_default, None)
Production.__init__(TYPE_NAME, And([SPECIFIER_QUALIFIER_LIST,Repeat(ABSTRACT_DECLARATOR, 0, 1)], '(specifier_qualifier_list, abstract_declarator{0:1})'), "type_name", build_action_default, None)
Production.__init__(ABSTRACT_DECLARATOR, FirstChoice([POINTER,And([Repeat(POINTER, 0, 1),DIRECT_ABSTRACT_DECLARATOR], '(pointer{0:1}, direct_abstract_declarator)')], '(pointer / (pointer{0:1}, direct_abstract_declarator))'), "abstract_declarator", build_action_default, None)
Production.__init__(DIRECT_ABSTRACT_DECLARATOR, FirstChoice([And([PUNC_40,ABSTRACT_DECLARATOR,PUNC_41], '((, abstract_declarator, ))'),And([Repeat(And([PUNC_40,ABSTRACT_DECLARATOR,PUNC_41], '((, abstract_declarator, ))'), 0, 1),Repeat(FirstChoice([ARRAY_ABS_DECLARATOR,FUNCTION_ABS_DECLARATOR], '(array_abs_declarator / function_abs_declarator)'), 1, 0)], '(((, abstract_declarator, )){0:1}, (array_abs_declarator / function_abs_declarator){1:})')], '(((, abstract_declarator, )) / (((, abstract_declarator, )){0:1}, (array_abs_declarator / function_abs_declarator){1:}))'), "direct_abstract_declarator", build_action_default, None)
Production.__init__(ARRAY_ABS_DECLARATOR, And([PUNC_91,FirstChoice([And([Repeat(STATIC, 0, 1),Repeat(TYPE_QUALIFIER, 0, 0),Repeat(STATIC, 0, 1),Repeat(ASSIGNMENT_EXPRESSION, 0, 1)], '(static{0:1}, type_qualifier{0:}, static{0:1}, assignment_expression{0:1})'),PUNC_42], '((static{0:1}, type_qualifier{0:}, static{0:1}, assignment_expression{0:1}) / *)'),PUNC_93], '([, ((static{0:1}, type_qualifier{0:}, static{0:1}, assignment_expression{0:1}) / *), ])'), "array_abs_declarator", build_action_default, None)
Production.__init__(FUNCTION_ABS_DECLARATOR, And([PUNC_40,Repeat(PARAMETER_TYPE_LIST, 0, 1),PUNC_41], '((, parameter_type_list{0:1}, ))'), "function_abs_declarator", build_action_default, None)
Production.__init__(TYPEDEF_NAME, IDENTIFIER, "typedef_name", build_action_default, None)
Production.__init__(INITIALIZER, FirstChoice([ASSIGNMENT_EXPRESSION,And([PUNC_123,INITIALIZER_LIST,Repeat(PUNC_44, 0, 1),PUNC_125], '({, initializer_list, ,{0:1}, })')], '(assignment_expression / ({, initializer_list, ,{0:1}, }))'), "initializer", build_action_default, None)
Production.__init__(INITIALIZER_LIST, List(And([Repeat(DESIGNATION, 0, 1),INITIALIZER], '(designation{0:1}, initializer)'), PUNC_44), "initializer_list", build_action_default, None)
Production.__init__(DESIGNATION, And([Repeat(DESIGNATOR, 1, 0),PUNC_61], '(designator{1:}, =)'), "designation", build_action_default, None)
Production.__init__(DESIGNATOR, FirstChoice([And([PUNC_91,CONSTANT_EXPRESSION,PUNC_93], '([, constant_expression, ])'),And([PUNC_46,IDENTIFIER], '(., identifier)')], '(([, constant_expression, ]) / (., identifier))'), "designator", build_action_default, None)
Production.__init__(STATIC_ASSERT_DECLARATION, And([_STATIC_ASSERT,PUNC_40,CONSTANT_EXPRESSION,PUNC_44,STRING_LITERAL,PUNC_41,PUNC_59], '(_Static_assert, (, constant_expression, ,, string_literal, ), ;)'), "static_assert_declaration", build_action_default, None)
Production.__init__(STATEMENT, FirstChoice([ASM_STATEMENT,LABELED_STATEMENT,COMPOUND_STATEMENT,EXPRESSION_STATEMENT,SELECTION_STATEMENT,ITERATION_STATEMENT,JUMP_STATEMENT], '(asm_statement / labeled_statement / compound_statement / expression_statement / selection_statement / iteration_statement / jump_statement)'), "statement", build_action_default, None)
Production.__init__(ASM_STATEMENT, And([FirstChoice([ASM,__ASM__], '(asm / __asm__)'),Repeat(ASM_QUALIFIERS, 0, 0),PAREN_BLOCK], '((asm / __asm__), asm_qualifiers{0:}, paren_block)'), "asm_statement", build_action_default, None)
Production.__init__(ASM_QUALIFIERS, FirstChoice([VOLATILE,__VOLATILE__,__INLINE__,INLINE,GOTO], '(volatile / __volatile__ / __inline__ / inline / goto)'), "asm_qualifiers", build_action_default, None)
Production.__init__(LABELED_STATEMENT, And([FirstChoice([IDENTIFIER,And([CASE,CONSTANT_EXPRESSION], '(case, constant_expression)'),DEFAULT], '(identifier / (case, constant_expression) / default)'),PUNC_58,STATEMENT], '((identifier / (case, constant_expression) / default), :, statement)'), "labeled_statement", build_action_default, None)
Production.__init__(COMPOUND_STATEMENT, And([PUNC_123,Repeat(BLOCK_ITEM, 0, 0),PUNC_125], '({, block_item{0:}, })'), "compound_statement", build_action_default, None)
Production.__init__(BLOCK_ITEM, FirstChoice([STATEMENT,DECLARATION], '(statement / declaration)'), "block_item", build_action_default, None)
Production.__init__(EXPRESSION_STATEMENT, And([Repeat(EXPRESSION, 0, 1),PUNC_59], '(expression{0:1}, ;)'), "expression_statement", build_action_default, None)
Production.__init__(SELECTION_STATEMENT, FirstChoice([And([IF,PUNC_40,EXPRESSION,PUNC_41,STATEMENT,Repeat(And([ELSE,STATEMENT], '(else, statement)'), 0, 1)], '(if, (, expression, ), statement, (else, statement){0:1})'),And([SWITCH,PUNC_40,EXPRESSION,PUNC_41,STATEMENT], '(switch, (, expression, ), statement)')], '((if, (, expression, ), statement, (else, statement){0:1}) / (switch, (, expression, ), statement))'), "selection_statement", build_action_default, None)
Production.__init__(ITERATION_STATEMENT, FirstChoice([And([WHILE,PUNC_40,EXPRESSION,PUNC_41,STATEMENT], '(while, (, expression, ), statement)'),And([DO,STATEMENT,WHILE,PUNC_40,EXPRESSION,PUNC_41,PUNC_59], '(do, statement, while, (, expression, ), ;)'),And([FOR,PUNC_40,FirstChoice([And([Repeat(EXPRESSION, 0, 1),PUNC_59], '(expression{0:1}, ;)'),DECLARATION], '((expression{0:1}, ;) / declaration)'),Repeat(EXPRESSION, 0, 1),PUNC_59,Repeat(EXPRESSION, 0, 1),PUNC_41,STATEMENT], '(for, (, ((expression{0:1}, ;) / declaration), expression{0:1}, ;, expression{0:1}, ), statement)')], '((while, (, expression, ), statement) / (do, statement, while, (, expression, ), ;) / (for, (, ((expression{0:1}, ;) / declaration), expression{0:1}, ;, expression{0:1}, ), statement))'), "iteration_statement", build_action_default, None)
Production.__init__(JUMP_STATEMENT, And([FirstChoice([And([GOTO,IDENTIFIER], '(goto, identifier)'),CONTINUE,BREAK,And([RETURN,Repeat(EXPRESSION, 0, 1)], '(return, expression{0:1})')], '((goto, identifier) / continue / break / (return, expression{0:1}))'),PUNC_59], '(((goto, identifier) / continue / break / (return, expression{0:1})), ;)'), "jump_statement", build_action_default, None)
Production.__init__(C_FUNCTION_DEFINITION, And([Repeat(DECLARATION_SPECIFIER, 1, 0),DECLARATOR,Repeat(DECLARATION, 0, 0),COMPOUND_STATEMENT], '(declaration_specifier{1:}, declarator, declaration{0:}, compound_statement)'), "c_function_definition", build_action_default, None)
Production.__init__(FUNCTION_DEFINITION, FUNCTION_DEFINITION_REC, "function_definition", build_action_default, None)
Production.__init__(FUNCTION_DEFINITION_REC, And([DECLARATION_SPECIFIER,FirstChoice([And([DECLARATOR,Repeat(DECLARATION, 0, 0),COMPOUND_STATEMENT], '(declarator, declaration{0:}, compound_statement)'),FUNCTION_DEFINITION_REC], '((declarator, declaration{0:}, compound_statement) / function_definition_rec)')], '(declaration_specifier, ((declarator, declaration{0:}, compound_statement) / function_definition_rec))'), "function_definition_rec", build_action_default, None)
Production.__init__(NON_LINE_END, RegexRule("[^\n]+"), "non_line_end", build_action_default, None)
Production.__init__(PRAGMA_DIRECTIVE, And([PUNC_35,PRAGMA], '(#, pragma)'), "pragma_directive", directive_line, None)
Production.__init__(EXTERNAL_DECLARATION, FirstChoice([PRAGMA_DIRECTIVE,FUNCTION_DEFINITION,DECLARATION,PUNC_59], '(pragma_directive / function_definition / declaration / ;)'), "external_declaration", build_action_default, None)